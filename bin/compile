#!/bin/sh

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
INSTALL_DIR=$BUILD_DIR/.local

export PATH=$INSTALL_DIR/bin:$PATH
mkdir -p $CACHE_DIR $INSTALL_DIR/bin $INSTALL_DIR/lib $INSTALL_DIR/run

echo "-----> Installing docker"
DOCKER_VERSION=`curl -s https://download.docker.com/linux/static/stable/x86_64/ | grep "\-ce" | grep -oP "[0-9]+\.[0-9]+\.[0-9]" | tail -n 1`
[ -e $CACHE_DIR/docker.tgz ] || curl -s https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}-ce.tgz -o $CACHE_DIR/docker.tgz
tar xzf $CACHE_DIR/docker.tgz
chmod +x docker/* && mv docker/* $INSTALL_DIR/bin
docker --version
dockerd --version

echo "-----> Starting docker daemon"
dockerd --data-root $INSTALL_DIR/lib --exec-root $INSTALL_DIR/run --pidfile $INSTALL_DIR/run/docker.pid --containerd $INSTALL_DIR/run/docker.sock

echo "-----> Installing ttyd"
curl -s https://github.com/tsl0922/ttyd/releases/download/1.6.0/ttyd_linux.x86_64 -o $INSTALL_DIR/bin/ttyd
chmod +x $INSTALL_DIR/ttyd
ttyd --version

echo "-----> Building app Dockerfile"
cd $BUILD_DIR && docker build -t service:latest .

echo "-----> Generating ttyd runner"
cat <<EOF > run.sh
#!/bin/bash
set -euo pipefail

container=""

function cleanup() {
  docker rm -f "\${container}"
}
trap cleanup EXIT

container=\$(docker run -d --entrypoint /bin/sh service:latest -c "sleep 3600")

if [ -z "\${container}" ]; then
	echo "Failed to obtain container ID"
	exit 1
fi

docker exec -it "\${container}" bash
EOF
